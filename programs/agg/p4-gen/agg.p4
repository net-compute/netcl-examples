// code generated by NCC v0.1.0
// target: tna
// location: 1
// source-file: 
#include <core.p4>
#include <tna.p4>

#define __NCVM__
#define __NCL_LOCATION__ 1
#define __NCL_TARGET_TOFINO__
#define __NCL_TARGET_TOFINO_TNA__
#define __NCL_TARGET_NAME__ "tna"

enum bit<16> _ETH_TYPE_ {
	IPV4 = 2048}
enum bit<8> _IP4_PROTO_ {
	ECMP = 1,
	UDP = 17}
enum bit<16> ncl_error_t {
	nclSuccess = 0,
	nclErrorGeneric = 1,
	nclErrorRuntimeError = 2,
	nclErrorIndexOutOfBounds = 3,
	nclErrorP4 = 4,
	nclErrorP4Parser = 5}
header ethernet_h {
	bit<48> dst_addr;
	bit<48> src_addr;
	bit<16> eth_type;
}
header ipv4_h {
	bit<4> version;
	bit<4> ihl;
	bit<8> tos;
	bit<16> total_len;
	bit<16> identification;
	bit<3> flags;
	bit<13> frag_offset;
	bit<8> ttl;
	bit<8> protocol;
	bit<16> checksum;
	bit<32> src_addr;
	bit<32> dst_addr;
}
header udp_h {
	bit<16> src_port;
	bit<16> dst_port;
	bit<16> length;
	bit<16> checksum;
}
@ncvm("ncrt.ncp.header")
header ncp_h {
	bit<8> cid;
	bit<8> act;
	bit<16> act_arg;
	bit<8> d_src;
	bit<8> d_dst;
	bit<8> h_src;
	bit<8> h_dst;
}
@ncvm("ncrt.util.box")
header _box_h<T> {
	T value;
}
@ncvm("p4.headers.1")
struct headers {
	ethernet_h eth;
	ipv4_h ip4;
	udp_h udp;
	ncp_h ncp;
	_box_h<bit<32>>[1] ncp_data_1_0;
	_box_h<bit<8>>[1] ncp_data_1_1;
	_box_h<bit<16>>[1] ncp_data_1_2;
	_box_h<bit<16>>[1] ncp_data_1_3;
	_box_h<bit<16>>[1] ncp_data_1_4;
	_box_h<bit<32>>[1] ncp_data_1_5;
	_box_h<bit<32>>[32] ncp_data_1_6;
}
@ncvm("p4.metadata.1")
struct metadata {
	@field_list(0x42) @ncvm("p4.metadata.1:iter")
	bit<32> ncl_iter;
	@ncvm("p4.metadata.1:act")
	bit<8> ncl_act;
	@ncvm("p4.metadata.1:act_arg")
	bit<16> ncl_act_arg;
	bool ncl_sender_is_host;
	bool ncl_no_op;
	bool ncl_next_is_neighbour;
}
const bit<8> _ncl_action_none_ = 0;
const bit<8> _ncl_action_pass_ = 1;
const bit<8> _ncl_action_drop_ = 3;
const bit<8> _ncl_action_repeat_ = 4;
const bit<8> _ncl_action_reflect_ = 5;
const bit<8> _ncl_action_reflect_long_ = 6;
const bit<8> _ncl_action_send_to_host_ = 7;
const bit<8> _ncl_action_send_to_device_ = 8;
const bit<8> _ncl_action_multicast_ = 9;
const bit<8> _ncl_action_multicast_long_ = 16;
const bit<8> _ncl_device_kind_unknown_ = 0;
const bit<8> _ncl_device_kind_switch_ = 1;
const bit<8> _ncl_device_kind_nic_ = 2;
const bit<8> _ncl_device_id_unknown_ = 0;
@ncvm("ncrt.const.device.id")const bit<8> _ncl_device_id_ = 1;
@ncvm("ncrt.const.device.kind")const bit<8> _ncl_device_kind_ = _ncl_device_kind_switch_;
@ncvm("ncrt.const.action.default")const bit<8> _ncl_default_action_ = _ncl_action_pass_;
@ncvm("ncrt.const.action.default_arg")const bit<16> _ncl_default_action_arg_ = 0;
@ncvm("ncrt.const.action.error")const bit<8> _ncl_error_action_ = _ncl_action_drop_;
@ncvm("ncrt.const.action.error_arg")const bit<16> _ncl_error_action_arg_ = 0;
@ncvm("ncrt.const.ip.4.addr")const bit<32> _ncl_ip4_addr_ = 707406378;
@ncvm("ncrt.const.udp.port")const bit<16> _ncl_udp_port_ = 4242;
@ncvm("ncrt.const.multicast.default_gid")const bit<16> _ncl_multicast_group_default_ = 0;
@ncvm("ncrt.const.host.multicast.use_implicit_source_addr")const bool _ncl_host_multicast_implicit_src_ = false;
@ncvm("ncrt.const.host.reflect.use_implicit_source_addr")const bool _ncl_host_reflect_implicit_src_ = false;
@ncvm("ncrt.const.host.loop.use_implicit_source_addr")const bool _ncl_host_loop_implicit_src_ = false;
@ncvm("ncrt.const.use_implicit_ip4_src_addr")const bool _ncl_use_implicit_ip4_src_addr_ = ((_ncl_host_multicast_implicit_src_ || _ncl_host_reflect_implicit_src_) || _ncl_host_loop_implicit_src_);
action ncl_lookup_read_u8(out bit<8> val,  bit<8> value) {val = value; }
action ncl_lookup_read_u16(out bit<16> val,  bit<16> value) {val = value; }
action ncl_lookup_read_u32(out bit<32> val,  bit<32> value) {val = value; }
action ncl_lookup_read_u64(out bit<64> val,  bit<64> value) {val = value; }
action ncl_lookup_read_none() { }
@ncvm("ncrt.action.drop")
action ncvm_action_drop(inout metadata M) {
	M.ncl_act = _ncl_action_drop_;
	M.ncl_act_arg = _ncl_default_action_arg_;
}
@ncvm("ncrt.action.pass")
action ncvm_action_pass(inout metadata M) {
	M.ncl_act = _ncl_action_pass_;
	M.ncl_act_arg = _ncl_default_action_arg_;
}
@ncvm("ncrt.action.send_to_host")
action ncvm_action_send_to_host(inout metadata M, in bit<16> ID) {
	M.ncl_act = _ncl_action_send_to_host_;
	M.ncl_act_arg = ID;
}
@ncvm("ncrt.action.send_to_device")
action ncvm_action_send_to_device(inout metadata M, in bit<16> ID) {
	M.ncl_act = _ncl_action_send_to_device_;
	M.ncl_act_arg = ID;
}
@ncvm("ncrt.action.reflect")
action ncvm_action_reflect(inout metadata M) {
	M.ncl_act = _ncl_action_reflect_;
	M.ncl_act_arg = _ncl_default_action_arg_;
}
@ncvm("ncrt.action.reflect_long")
action ncvm_action_reflect_long(inout metadata M) {
	M.ncl_act = _ncl_action_reflect_long_;
	M.ncl_act_arg = _ncl_default_action_arg_;
}
@ncvm("ncrt.action.multicast")
action ncvm_action_multicast(inout metadata M, in bit<16> ID) {
	M.ncl_act = _ncl_action_multicast_;
	M.ncl_act_arg = ID;
}
@ncvm("ncrt.action.multicast")
action ncvm_action_repeat(inout metadata M) {
	M.ncl_act = _ncl_action_repeat_;
	M.ncl_act_arg = _ncl_default_action_arg_;
}
@ncvm("ncrt.ncp.parser.data.1")
parser NCPDataParser(packet_in P,
                     inout headers H,
                     in bit<8> Compute) {
	bit<32> cnt = 0;
	@ncvm("ncrt.ncp.parser.data.1:start")
	state start {
		transition _parse_data_1_0;
	}
	state _parse_data_1_0 {
		P.extract(H.ncp_data_1_0.next);
		transition _parse_data_1_1;
	}
	state _parse_data_1_1 {
		P.extract(H.ncp_data_1_1.next);
		transition _parse_data_1_2;
	}
	state _parse_data_1_2 {
		P.extract(H.ncp_data_1_2.next);
		transition _parse_data_1_3;
	}
	state _parse_data_1_3 {
		P.extract(H.ncp_data_1_3.next);
		transition _parse_data_1_4;
	}
	state _parse_data_1_4 {
		P.extract(H.ncp_data_1_4.next);
		transition _parse_data_1_5;
	}
	state _parse_data_1_5 {
		P.extract(H.ncp_data_1_5.next);
		transition _parse_data_1_6;
	}
	state _parse_data_1_6 {
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		P.extract(H.ncp_data_1_6.next);
		transition accept;
	}
}

@ncvm("p4.parser.1")
parser MainIngressParser(packet_in P,
                         out headers H,
                         out metadata M,
                         out ingress_intrinsic_metadata_t IIM) {
	NCPDataParser() ncp_data_parser;
	state start {
		P.extract(IIM);
		P.advance(PORT_METADATA_SIZE);
		transition select(IIM.resubmit_flag) {
			1: parse_resubmit;
			default: parse_port_metadata;
		}
	}
	state parse_resubmit {
		transition parse_ethernet;
	}
	state parse_port_metadata {
		transition parse_ethernet;
	}
	state parse_ethernet {
		P.extract(H.eth);
		transition select(H.eth.eth_type) {
			_ETH_TYPE_.IPV4: parse_ipv4;
			default: accept;
		}
	}
	state parse_ipv4 {
		P.extract(H.ip4);
		transition select(H.ip4.protocol) {
			_IP4_PROTO_.UDP: parse_udp;
			default: accept;
		}
	}
	state parse_udp {
		P.extract(H.udp);
		transition select(H.udp.dst_port) {
			_ncl_udp_port_: parse_ncp;
			default: accept;
		}
	}
	state parse_ncp {
		P.extract(H.ncp);
		transition select(H.ncp.d_dst) {
			_ncl_device_id_: parse_ncp_data;
			default: ncp_no_op;
		}
	}
	state parse_ncp_data {
		ncp_data_parser.apply(P, H, H.ncp.cid);
		transition accept;
	}
	state ncp_no_op {
		M.ncl_no_op = true;
		transition accept;
	}
}

@ncvm("p4.deparser.1")
control MainIngressDeparser(packet_out P,
                            inout headers H,
                            in metadata M,
                            in ingress_intrinsic_metadata_for_deparser_t IDM) {
	apply {
		P.emit(H);
	}
}

@ncvm("main.1")
control ncl_compute(inout headers H,
                    inout metadata M,
                    in ingress_intrinsic_metadata_t IM) {
	bit<16> _lv__0_bitmap_0_reg2mem = 0;
	bit<32> call_i73;
	bit<16> _tmp__45_or93;
	bit<16> _tmp__8_and92;
	@name(".ncvm.mem.net.Agg_fragment_14_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_14_;
	@name(".ncvm.mem.net.Agg_fragment_21_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_21_;
	@name(".ncvm.mem.net.Agg_fragment_13_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_13_;
	@name(".ncvm.mem.net.Agg_fragment_6_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_6_;
	@name(".ncvm.mem.net.Agg_fragment_3_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_3_;
	@name(".ncvm.mem.net.Bitmap_fragment_1_")
	@hidden
	Register<bit<16>, bit<8>>(4) _mem_Bitmap_fragment_1_;
	@name(".ncvm.mem.net.Agg_fragment_22_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_22_;
	@name(".ncvm.mem.net.Bitmap_fragment_0_")
	@hidden
	Register<bit<16>, bit<8>>(4) _mem_Bitmap_fragment_0_;
	@name(".ncvm.mem.net.Agg_fragment_0_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_0_;
	@name(".ncvm.mem.net.Agg_fragment_19_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_19_;
	@name(".ncvm.mem.net.Agg_fragment_25_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_25_;
	@name(".ncvm.mem.net.Agg_fragment_27_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_27_;
	@name(".ncvm.mem.net.Agg_fragment_30_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_30_;
	@name(".ncvm.mem.net.Agg_fragment_20_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_20_;
	@name(".ncvm.mem.net.Agg_fragment_31_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_31_;
	@name(".ncvm.mem.net.Agg_fragment_28_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_28_;
	@name(".ncvm.mem.net.Agg_fragment_10_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_10_;
	@name(".ncvm.mem.net.Agg_fragment_8_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_8_;
	@name(".ncvm.mem.net.Agg_fragment_9_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_9_;
	@name(".ncvm.mem.net.Agg_fragment_26_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_26_;
	@name(".ncvm.mem.net.Agg_fragment_7_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_7_;
	@name(".ncvm.mem.net.Agg_fragment_15_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_15_;
	@name(".ncvm.mem.net.Agg_fragment_18_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_18_;
	@name(".ncvm.mem.net.Agg_fragment_24_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_24_;
	@name(".ncvm.mem.net.Agg_fragment_4_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_4_;
	@name(".ncvm.mem.net.Agg_fragment_1_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_1_;
	@name(".ncvm.mem.net.Agg_fragment_2_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_2_;
	@name(".ncvm.mem.net.Agg_fragment_29_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_29_;
	@name(".ncvm.mem.net.Agg_fragment_11_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_11_;
	@name(".ncvm.mem.net.Agg_fragment_12_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_12_;
	@name(".ncvm.mem.net.Count")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Count;
	@name(".ncvm.mem.net.Expo")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Expo;
	@name(".ncvm.mem.net.Agg_fragment_5_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_5_;
	@name(".ncvm.mem.net.Agg_fragment_23_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_23_;
	@name(".ncvm.mem.net.Agg_fragment_17_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_17_;
	@name(".ncvm.mem.net.Agg_fragment_16_")
	@hidden
	Register<bit<32>, bit<8>>(8) _mem_Agg_fragment_16_;
	RegisterAction<bit<16>, bit<8>, bit<16>>(_mem_Bitmap_fragment_0_) __ra__ncvm_atomic_and_u16_0_0_0_l_0_ = {
		void apply(inout bit<16> R, out bit<16> O){
			O = R;
			R = (R & ~H.ncp_data_1_4[0].value);
		}
	};
	RegisterAction<bit<16>, bit<8>, bit<16>>(_mem_Bitmap_fragment_1_) __ra__ncvm_atomic_or_u16_1_0_0_m_0_ = {
		void apply(inout bit<16> R, out bit<16> O){
			O = R;
			R = (R | H.ncp_data_1_4[0].value);
		}
	};
	RegisterAction<bit<16>, bit<8>, bit<16>>(_mem_Bitmap_fragment_0_) __ra__ncvm_atomic_or_u16_2_1_0_m_0_ = {
		void apply(inout bit<16> R, out bit<16> O){
			O = R;
			R = (R | H.ncp_data_1_4[0].value);
		}
	};
	RegisterAction<bit<16>, bit<8>, bit<16>>(_mem_Bitmap_fragment_1_) __ra__ncvm_atomic_and_u16_3_1_0_l_0_ = {
		void apply(inout bit<16> R, out bit<16> O){
			O = R;
			R = (R & ~H.ncp_data_1_4[0].value);
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Expo) __ra__ncvm_atomic_cond_max_new_u32_4_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = max(R, H.ncp_data_1_5[0].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_0_) __ra__ncvm_atomic_cond_add_new_u32_5_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[0].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_1_) __ra__ncvm_atomic_cond_add_new_u32_6_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[1].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_2_) __ra__ncvm_atomic_cond_add_new_u32_7_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[2].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_3_) __ra__ncvm_atomic_cond_add_new_u32_8_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[3].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_4_) __ra__ncvm_atomic_cond_add_new_u32_9_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[4].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_5_) __ra__ncvm_atomic_cond_add_new_u32_10_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[5].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_6_) __ra__ncvm_atomic_cond_add_new_u32_11_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[6].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_7_) __ra__ncvm_atomic_cond_add_new_u32_12_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[7].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_8_) __ra__ncvm_atomic_cond_add_new_u32_13_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[8].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_9_) __ra__ncvm_atomic_cond_add_new_u32_14_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[9].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_10_) __ra__ncvm_atomic_cond_add_new_u32_15_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[10].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_11_) __ra__ncvm_atomic_cond_add_new_u32_16_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[11].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_12_) __ra__ncvm_atomic_cond_add_new_u32_17_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[12].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_13_) __ra__ncvm_atomic_cond_add_new_u32_18_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[13].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_14_) __ra__ncvm_atomic_cond_add_new_u32_19_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[14].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_15_) __ra__ncvm_atomic_cond_add_new_u32_20_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[15].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_16_) __ra__ncvm_atomic_cond_add_new_u32_21_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[16].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_17_) __ra__ncvm_atomic_cond_add_new_u32_22_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[17].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_18_) __ra__ncvm_atomic_cond_add_new_u32_23_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[18].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_19_) __ra__ncvm_atomic_cond_add_new_u32_24_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[19].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_20_) __ra__ncvm_atomic_cond_add_new_u32_25_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[20].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_21_) __ra__ncvm_atomic_cond_add_new_u32_26_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[21].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_22_) __ra__ncvm_atomic_cond_add_new_u32_27_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[22].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_23_) __ra__ncvm_atomic_cond_add_new_u32_28_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[23].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_24_) __ra__ncvm_atomic_cond_add_new_u32_29_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[24].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_25_) __ra__ncvm_atomic_cond_add_new_u32_30_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[25].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_26_) __ra__ncvm_atomic_cond_add_new_u32_31_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[26].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_27_) __ra__ncvm_atomic_cond_add_new_u32_32_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[27].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_28_) __ra__ncvm_atomic_cond_add_new_u32_33_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[28].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_29_) __ra__ncvm_atomic_cond_add_new_u32_34_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[29].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_30_) __ra__ncvm_atomic_cond_add_new_u32_35_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[30].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_31_) __ra__ncvm_atomic_cond_add_new_u32_36_0_0_lm_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			if ((_tmp__8_and92 == 0)) {
				R = (R + H.ncp_data_1_6[31].value);
			}
			O = R;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Count) __ra__ncvm_atomic_cond_dec_u32_37_0_0_l_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = R;
			if ((_tmp__8_and92 == 0)) {
				R = (R - 1);
			}
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Count) __ra__ncvm_atomic_write_u32_38_1_0_e_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = 1;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Expo) __ra__ncvm_atomic_write_u32_39_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_5[0].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_0_) __ra__ncvm_atomic_write_u32_40_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[0].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_1_) __ra__ncvm_atomic_write_u32_41_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[1].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_2_) __ra__ncvm_atomic_write_u32_42_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[2].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_3_) __ra__ncvm_atomic_write_u32_43_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[3].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_4_) __ra__ncvm_atomic_write_u32_44_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[4].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_5_) __ra__ncvm_atomic_write_u32_45_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[5].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_6_) __ra__ncvm_atomic_write_u32_46_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[6].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_7_) __ra__ncvm_atomic_write_u32_47_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[7].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_8_) __ra__ncvm_atomic_write_u32_48_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[8].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_9_) __ra__ncvm_atomic_write_u32_49_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[9].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_10_) __ra__ncvm_atomic_write_u32_50_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[10].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_11_) __ra__ncvm_atomic_write_u32_51_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[11].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_12_) __ra__ncvm_atomic_write_u32_52_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[12].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_13_) __ra__ncvm_atomic_write_u32_53_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[13].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_14_) __ra__ncvm_atomic_write_u32_54_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[14].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_15_) __ra__ncvm_atomic_write_u32_55_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[15].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_16_) __ra__ncvm_atomic_write_u32_56_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[16].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_17_) __ra__ncvm_atomic_write_u32_57_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[17].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_18_) __ra__ncvm_atomic_write_u32_58_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[18].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_19_) __ra__ncvm_atomic_write_u32_59_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[19].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_20_) __ra__ncvm_atomic_write_u32_60_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[20].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_21_) __ra__ncvm_atomic_write_u32_61_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[21].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_22_) __ra__ncvm_atomic_write_u32_62_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[22].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_23_) __ra__ncvm_atomic_write_u32_63_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[23].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_24_) __ra__ncvm_atomic_write_u32_64_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[24].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_25_) __ra__ncvm_atomic_write_u32_65_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[25].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_26_) __ra__ncvm_atomic_write_u32_66_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[26].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_27_) __ra__ncvm_atomic_write_u32_67_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[27].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_28_) __ra__ncvm_atomic_write_u32_68_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[28].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_29_) __ra__ncvm_atomic_write_u32_69_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[29].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_30_) __ra__ncvm_atomic_write_u32_70_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[30].value;
		}
	};
	RegisterAction<bit<32>, bit<8>, bit<32>>(_mem_Agg_fragment_31_) __ra__ncvm_atomic_write_u32_71_1_0_m_0_ = {
		void apply(inout bit<32> R, out bit<32> O){
			O = ((bit<32>) R);
			R = H.ncp_data_1_6[31].value;
		}
	};
	action mem_rmw_0_mem_Bitmap_fragment_0_(in bit<8> i) {	__ra__ncvm_atomic_and_u16_0_0_0_l_0_.execute(i); }
	action mem_rmw_10_mem_Agg_fragment_6_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_46_1_0_m_0_.execute(i); }
	action mem_rmw_11_mem_Agg_fragment_7_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_47_1_0_m_0_.execute(i); }
	action mem_rmw_12_mem_Agg_fragment_8_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_48_1_0_m_0_.execute(i); }
	action mem_rmw_13_mem_Agg_fragment_9_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_49_1_0_m_0_.execute(i); }
	action mem_rmw_14_mem_Agg_fragment_10_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_50_1_0_m_0_.execute(i); }
	action mem_rmw_15_mem_Agg_fragment_11_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_51_1_0_m_0_.execute(i); }
	action mem_rmw_16_mem_Agg_fragment_12_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_52_1_0_m_0_.execute(i); }
	action mem_rmw_17_mem_Agg_fragment_13_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_53_1_0_m_0_.execute(i); }
	action mem_rmw_18_mem_Agg_fragment_14_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_54_1_0_m_0_.execute(i); }
	action mem_rmw_19_mem_Agg_fragment_15_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_55_1_0_m_0_.execute(i); }
	action mem_rmw_1_mem_Bitmap_fragment_1_(in bit<8> i) {	__ra__ncvm_atomic_and_u16_3_1_0_l_0_.execute(i); }
	action mem_rmw_20_mem_Agg_fragment_16_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_56_1_0_m_0_.execute(i); }
	action mem_rmw_21_mem_Agg_fragment_17_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_57_1_0_m_0_.execute(i); }
	action mem_rmw_22_mem_Agg_fragment_18_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_58_1_0_m_0_.execute(i); }
	action mem_rmw_23_mem_Agg_fragment_19_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_59_1_0_m_0_.execute(i); }
	action mem_rmw_24_mem_Agg_fragment_20_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_60_1_0_m_0_.execute(i); }
	action mem_rmw_25_mem_Agg_fragment_21_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_61_1_0_m_0_.execute(i); }
	action mem_rmw_26_mem_Agg_fragment_22_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_62_1_0_m_0_.execute(i); }
	action mem_rmw_27_mem_Agg_fragment_23_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_63_1_0_m_0_.execute(i); }
	action mem_rmw_28_mem_Agg_fragment_24_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_64_1_0_m_0_.execute(i); }
	action mem_rmw_29_mem_Agg_fragment_25_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_65_1_0_m_0_.execute(i); }
	action mem_rmw_2_mem_Count(in bit<8> i) {	__ra__ncvm_atomic_write_u32_38_1_0_e_0_.execute(i); }
	action mem_rmw_30_mem_Agg_fragment_26_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_66_1_0_m_0_.execute(i); }
	action mem_rmw_31_mem_Agg_fragment_27_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_67_1_0_m_0_.execute(i); }
	action mem_rmw_32_mem_Agg_fragment_28_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_68_1_0_m_0_.execute(i); }
	action mem_rmw_33_mem_Agg_fragment_29_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_69_1_0_m_0_.execute(i); }
	action mem_rmw_34_mem_Agg_fragment_30_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_70_1_0_m_0_.execute(i); }
	action mem_rmw_35_mem_Agg_fragment_31_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_71_1_0_m_0_.execute(i); }
	action mem_rmw_3_mem_Expo(in bit<8> i) {	__ra__ncvm_atomic_write_u32_39_1_0_m_0_.execute(i); }
	action mem_rmw_4_mem_Agg_fragment_0_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_40_1_0_m_0_.execute(i); }
	action mem_rmw_5_mem_Agg_fragment_1_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_41_1_0_m_0_.execute(i); }
	action mem_rmw_6_mem_Agg_fragment_2_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_42_1_0_m_0_.execute(i); }
	action mem_rmw_7_mem_Agg_fragment_3_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_43_1_0_m_0_.execute(i); }
	action mem_rmw_8_mem_Agg_fragment_4_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_44_1_0_m_0_.execute(i); }
	action mem_rmw_9_mem_Agg_fragment_5_(in bit<8> i) {	__ra__ncvm_atomic_write_u32_45_1_0_m_0_.execute(i); }
	action mem_rmw_o_0_mem_Bitmap_fragment_1_(out bit<16> o, in bit<8> i) {	o = __ra__ncvm_atomic_or_u16_1_0_0_m_0_.execute(i); }
	action mem_rmw_o_10_mem_Agg_fragment_7_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_12_0_0_lm_0_.execute(i); }
	action mem_rmw_o_11_mem_Agg_fragment_8_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_13_0_0_lm_0_.execute(i); }
	action mem_rmw_o_12_mem_Agg_fragment_9_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_14_0_0_lm_0_.execute(i); }
	action mem_rmw_o_13_mem_Agg_fragment_10_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_15_0_0_lm_0_.execute(i); }
	action mem_rmw_o_14_mem_Agg_fragment_11_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_16_0_0_lm_0_.execute(i); }
	action mem_rmw_o_15_mem_Agg_fragment_12_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_17_0_0_lm_0_.execute(i); }
	action mem_rmw_o_16_mem_Agg_fragment_13_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_18_0_0_lm_0_.execute(i); }
	action mem_rmw_o_17_mem_Agg_fragment_14_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_19_0_0_lm_0_.execute(i); }
	action mem_rmw_o_18_mem_Agg_fragment_15_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_20_0_0_lm_0_.execute(i); }
	action mem_rmw_o_19_mem_Agg_fragment_16_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_21_0_0_lm_0_.execute(i); }
	action mem_rmw_o_1_mem_Bitmap_fragment_0_(out bit<16> o, in bit<8> i) {	o = __ra__ncvm_atomic_or_u16_2_1_0_m_0_.execute(i); }
	action mem_rmw_o_20_mem_Agg_fragment_17_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_22_0_0_lm_0_.execute(i); }
	action mem_rmw_o_21_mem_Agg_fragment_18_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_23_0_0_lm_0_.execute(i); }
	action mem_rmw_o_22_mem_Agg_fragment_19_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_24_0_0_lm_0_.execute(i); }
	action mem_rmw_o_23_mem_Agg_fragment_20_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_25_0_0_lm_0_.execute(i); }
	action mem_rmw_o_24_mem_Agg_fragment_21_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_26_0_0_lm_0_.execute(i); }
	action mem_rmw_o_25_mem_Agg_fragment_22_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_27_0_0_lm_0_.execute(i); }
	action mem_rmw_o_26_mem_Agg_fragment_23_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_28_0_0_lm_0_.execute(i); }
	action mem_rmw_o_27_mem_Agg_fragment_24_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_29_0_0_lm_0_.execute(i); }
	action mem_rmw_o_28_mem_Agg_fragment_25_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_30_0_0_lm_0_.execute(i); }
	action mem_rmw_o_29_mem_Agg_fragment_26_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_31_0_0_lm_0_.execute(i); }
	action mem_rmw_o_2_mem_Expo(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_max_new_u32_4_0_0_lm_0_.execute(i); }
	action mem_rmw_o_30_mem_Agg_fragment_27_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_32_0_0_lm_0_.execute(i); }
	action mem_rmw_o_31_mem_Agg_fragment_28_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_33_0_0_lm_0_.execute(i); }
	action mem_rmw_o_32_mem_Agg_fragment_29_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_34_0_0_lm_0_.execute(i); }
	action mem_rmw_o_33_mem_Agg_fragment_30_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_35_0_0_lm_0_.execute(i); }
	action mem_rmw_o_34_mem_Agg_fragment_31_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_36_0_0_lm_0_.execute(i); }
	action mem_rmw_o_35_mem_Count(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_dec_u32_37_0_0_l_0_.execute(i); }
	action mem_rmw_o_3_mem_Agg_fragment_0_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_5_0_0_lm_0_.execute(i); }
	action mem_rmw_o_4_mem_Agg_fragment_1_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_6_0_0_lm_0_.execute(i); }
	action mem_rmw_o_5_mem_Agg_fragment_2_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_7_0_0_lm_0_.execute(i); }
	action mem_rmw_o_6_mem_Agg_fragment_3_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_8_0_0_lm_0_.execute(i); }
	action mem_rmw_o_7_mem_Agg_fragment_4_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_9_0_0_lm_0_.execute(i); }
	action mem_rmw_o_8_mem_Agg_fragment_5_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_10_0_0_lm_0_.execute(i); }
	action mem_rmw_o_9_mem_Agg_fragment_6_(out bit<32> o, in bit<8> i) {	o = __ra__ncvm_atomic_cond_add_new_u32_11_0_0_lm_0_.execute(i); }
	action ncvm_and_16_16_16(out bit<16> c, in bit<16> a, in bit<16> b) {	c = ((bit<16>) (a & b)); }
	action ncvm_or_16_16_16(out bit<16> c, in bit<16> a, in bit<16> b) {	c = ((bit<16>) (a | b)); }
	apply {
		if ((H.ncp_data_1_1[0].value == 0)) {
			mem_rmw_o_1_mem_Bitmap_fragment_0_(_lv__0_bitmap_0_reg2mem, ((bit<8>) H.ncp_data_1_2[0].value));
			mem_rmw_1_mem_Bitmap_fragment_1_(((bit<8>) H.ncp_data_1_2[0].value));
		}
		else {
			mem_rmw_0_mem_Bitmap_fragment_0_(((bit<8>) H.ncp_data_1_2[0].value));
			mem_rmw_o_0_mem_Bitmap_fragment_1_(_lv__0_bitmap_0_reg2mem, ((bit<8>) H.ncp_data_1_2[0].value));
		}
		if ((_lv__0_bitmap_0_reg2mem == 0)) {
			mem_rmw_2_mem_Count(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_3_mem_Expo(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_4_mem_Agg_fragment_0_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_5_mem_Agg_fragment_1_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_6_mem_Agg_fragment_2_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_7_mem_Agg_fragment_3_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_8_mem_Agg_fragment_4_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_9_mem_Agg_fragment_5_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_10_mem_Agg_fragment_6_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_11_mem_Agg_fragment_7_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_12_mem_Agg_fragment_8_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_13_mem_Agg_fragment_9_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_14_mem_Agg_fragment_10_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_15_mem_Agg_fragment_11_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_16_mem_Agg_fragment_12_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_17_mem_Agg_fragment_13_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_18_mem_Agg_fragment_14_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_19_mem_Agg_fragment_15_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_20_mem_Agg_fragment_16_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_21_mem_Agg_fragment_17_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_22_mem_Agg_fragment_18_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_23_mem_Agg_fragment_19_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_24_mem_Agg_fragment_20_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_25_mem_Agg_fragment_21_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_26_mem_Agg_fragment_22_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_27_mem_Agg_fragment_23_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_28_mem_Agg_fragment_24_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_29_mem_Agg_fragment_25_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_30_mem_Agg_fragment_26_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_31_mem_Agg_fragment_27_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_32_mem_Agg_fragment_28_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_33_mem_Agg_fragment_29_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_34_mem_Agg_fragment_30_(((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_35_mem_Agg_fragment_31_(((bit<8>) H.ncp_data_1_3[0].value));
		}
		else {
			ncvm_and_16_16_16(_tmp__8_and92, _lv__0_bitmap_0_reg2mem, H.ncp_data_1_4[0].value);
			mem_rmw_o_2_mem_Expo(H.ncp_data_1_5[0].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_3_mem_Agg_fragment_0_(H.ncp_data_1_6[0].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_4_mem_Agg_fragment_1_(H.ncp_data_1_6[1].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_5_mem_Agg_fragment_2_(H.ncp_data_1_6[2].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_6_mem_Agg_fragment_3_(H.ncp_data_1_6[3].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_7_mem_Agg_fragment_4_(H.ncp_data_1_6[4].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_8_mem_Agg_fragment_5_(H.ncp_data_1_6[5].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_9_mem_Agg_fragment_6_(H.ncp_data_1_6[6].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_10_mem_Agg_fragment_7_(H.ncp_data_1_6[7].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_11_mem_Agg_fragment_8_(H.ncp_data_1_6[8].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_12_mem_Agg_fragment_9_(H.ncp_data_1_6[9].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_13_mem_Agg_fragment_10_(H.ncp_data_1_6[10].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_14_mem_Agg_fragment_11_(H.ncp_data_1_6[11].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_15_mem_Agg_fragment_12_(H.ncp_data_1_6[12].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_16_mem_Agg_fragment_13_(H.ncp_data_1_6[13].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_17_mem_Agg_fragment_14_(H.ncp_data_1_6[14].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_18_mem_Agg_fragment_15_(H.ncp_data_1_6[15].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_19_mem_Agg_fragment_16_(H.ncp_data_1_6[16].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_20_mem_Agg_fragment_17_(H.ncp_data_1_6[17].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_21_mem_Agg_fragment_18_(H.ncp_data_1_6[18].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_22_mem_Agg_fragment_19_(H.ncp_data_1_6[19].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_23_mem_Agg_fragment_20_(H.ncp_data_1_6[20].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_24_mem_Agg_fragment_21_(H.ncp_data_1_6[21].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_25_mem_Agg_fragment_22_(H.ncp_data_1_6[22].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_26_mem_Agg_fragment_23_(H.ncp_data_1_6[23].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_27_mem_Agg_fragment_24_(H.ncp_data_1_6[24].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_28_mem_Agg_fragment_25_(H.ncp_data_1_6[25].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_29_mem_Agg_fragment_26_(H.ncp_data_1_6[26].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_30_mem_Agg_fragment_27_(H.ncp_data_1_6[27].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_31_mem_Agg_fragment_28_(H.ncp_data_1_6[28].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_32_mem_Agg_fragment_29_(H.ncp_data_1_6[29].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_33_mem_Agg_fragment_30_(H.ncp_data_1_6[30].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_34_mem_Agg_fragment_31_(H.ncp_data_1_6[31].value, ((bit<8>) H.ncp_data_1_3[0].value));
			mem_rmw_o_35_mem_Count(call_i73, ((bit<8>) H.ncp_data_1_3[0].value));
			ncvm_or_16_16_16(_tmp__45_or93, _lv__0_bitmap_0_reg2mem, H.ncp_data_1_4[0].value);
			if ((call_i73 == 0)) {
				ncvm_action_reflect(M);
			}
			else {
				if ((_tmp__45_or93 == 3)) {
					ncvm_action_multicast(M, 42);
				}
				else { }
			}
		}
		return;
	}
}

control ncl_network(inout headers H,
                    inout metadata M,
                    in ingress_intrinsic_metadata_t IM,
                    inout ingress_intrinsic_metadata_for_deparser_t IDM,
                    inout ingress_intrinsic_metadata_for_tm_t ITM) {
	action ncl_forward_host( PortId_t port) {
		H.ncp.act = M.ncl_act;
		H.ncp.act_arg = M.ncl_act_arg;
		H.ncp.d_src = _ncl_device_id_;
		H.ncp.d_dst = 0;
		ITM.ucast_egress_port = port;
	}
	action ncl_forward_device( PortId_t port) {
		H.ncp.act = M.ncl_act;
		H.ncp.act_arg = M.ncl_act_arg;
		H.ncp.d_src = _ncl_device_id_;
		H.ncp.d_dst = ((bit<8>) M.ncl_act_arg);
		ITM.ucast_egress_port = port;
	}
	action ncl_reflect_host() {
		H.ncp.act = M.ncl_act;
		H.ncp.act_arg = M.ncl_act_arg;
		H.ncp.d_src = _ncl_device_id_;
		H.ncp.h_dst = H.ncp.h_src;
		ITM.ucast_egress_port = IM.ingress_port;
	}
	action ncl_reflect_device() {
		H.ncp.act = M.ncl_act;
		H.ncp.act_arg = M.ncl_act_arg;
		bit<8> tmp = H.ncp.d_src;
		H.ncp.d_src = _ncl_device_id_;
		H.ncp.d_dst = tmp;
		ITM.ucast_egress_port = IM.ingress_port;
	}
	action ncl_multicast( MulticastGroupId_t mgid) {
		H.ncp.act = M.ncl_act;
		H.ncp.act_arg = M.ncl_act_arg;
		ITM.mcast_grp_a = mgid;
	}
	action ncl_drop() {	IDM.drop_ctl = 1; }
	action ncl_repeat() { }
	@name(".ncrt.ingress.tbl.forward.reflect")
	table ncl_forward_reflect_tbl {
		key = { H.ncp.d_src : exact; }
		actions = {ncl_reflect_host; ncl_reflect_device; ncl_drop; }
		default_action = ncl_reflect_device();
		size = 256;
		const entries = {
			0 : ncl_reflect_host();
		}
	}
	@name(".ncrt.ingress.tbl.forward.host")
	table ncl_forward_host_tbl {
		key = { M.ncl_act_arg : exact; }
		actions = {ncl_forward_host; ncl_drop; }
		default_action = ncl_drop();
		size = 256;
	}
	@name(".ncrt.ingress.tbl.forward.device")
	table ncl_forward_device_tbl {
		key = { M.ncl_act_arg : exact; }
		actions = {ncl_forward_device; ncl_drop; }
		default_action = ncl_drop();
		size = 256;
	}
	@name(".ncrt.ingress.tbl.forward.multicast")
	table ncl_forward_multicast_tbl {
		key = { M.ncl_act_arg : exact; }
		actions = {ncl_multicast; ncl_drop; }
		default_action = ncl_drop();
		size = 256;
	}
	apply {
		if ((M.ncl_act == _ncl_action_multicast_)) {
			ncl_forward_multicast_tbl.apply();
		}
		else
			if ((M.ncl_act == _ncl_action_repeat_)) {
				ncl_repeat();
			}
			else
				if ((M.ncl_act == _ncl_action_reflect_)) {
					ncl_forward_reflect_tbl.apply();
				}
				else
					if ((M.ncl_act == _ncl_action_send_to_device_)) {
						ncl_forward_device_tbl.apply();
					}
					else {
						ncl_forward_host_tbl.apply();
					}
	}
}

@ncvm("p4.main.1")
control MainIngress(inout headers H,
                    inout metadata M,
                    in ingress_intrinsic_metadata_t IM,
                    in ingress_intrinsic_metadata_from_parser_t IPM,
                    inout ingress_intrinsic_metadata_for_deparser_t IDM,
                    inout ingress_intrinsic_metadata_for_tm_t ITM) {
	apply {
		if (H.ncp.isValid()) {
			if (!M.ncl_no_op) {
				M.ncl_act = _ncl_default_action_;
				M.ncl_act_arg = _ncl_default_action_arg_;
				ncl_compute.apply(H, M, IM);
			}
			ncl_network.apply(H, M, IM, IDM, ITM);
		}
	}
}

@ncvm("p4.parser.2")
parser MainEgressParser(packet_in P,
                        out headers H,
                        out metadata M,
                        out egress_intrinsic_metadata_t EIM) {
	state start {
		P.extract(EIM);
		transition parse_ethernet;
	}
	state parse_ethernet {
		P.extract(H.eth);
		transition select(H.eth.eth_type) {
			_ETH_TYPE_.IPV4: parse_ipv4;
			default: accept;
		}
	}
	state parse_ipv4 {
		P.extract(H.ip4);
		transition select(H.ip4.protocol) {
			_IP4_PROTO_.UDP: parse_udp;
			default: accept;
		}
	}
	state parse_udp {
		P.extract(H.udp);
		transition select(H.udp.dst_port) {
			_ncl_udp_port_: parse_ncp;
			default: accept;
		}
	}
	state parse_ncp {
		P.extract(H.ncp);
		transition accept;
	}
}

@ncvm("p4.deparser.2")
control MainEgressDeparser(packet_out P,
                           inout headers H,
                           in metadata M,
                           in egress_intrinsic_metadata_for_deparser_t EDM) {
	Checksum() ip4_checksum;
	apply {
		H.ip4.checksum = ip4_checksum.update({H.ip4.version,H.ip4.ihl,H.ip4.tos,H.ip4.total_len,H.ip4.identification,H.ip4.flags,H.ip4.frag_offset,H.ip4.ttl,H.ip4.protocol,H.ip4.src_addr,H.ip4.dst_addr});
		P.emit(H.eth);
		P.emit(H.ip4);
		P.emit(H.udp);
		P.emit(H.ncp);
	}
}

action ncl_use_implicit_ip4_src_addr(inout headers H) {if (_ncl_use_implicit_ip4_src_addr_)
	H.ip4.src_addr = _ncl_ip4_addr_; }
@ncvm("p4.main.2")
control MainEgress(inout headers H,
                   inout metadata M,
                   in egress_intrinsic_metadata_t EM,
                   in egress_intrinsic_metadata_from_parser_t EPM,
                   inout egress_intrinsic_metadata_for_deparser_t EDM,
                   inout egress_intrinsic_metadata_for_output_port_t EPOM) {
	action drop() {	EDM.drop_ctl = 1; }
	action host_port( bit<8> id,  bit<32> ip,  bit<48> mac,  bool neighbor) {
		if (neighbor) {
			H.ncp.h_dst = id;
			H.ncp.d_dst = 0;
		}
		H.eth.src_addr = H.eth.dst_addr;
		H.eth.dst_addr = mac;
		H.ip4.dst_addr = ip;
		H.ip4.ttl = (H.ip4.ttl - 1);
		H.udp.checksum = 0;
	}
	action device_port( bit<8> id) {	H.ncp.d_dst = id; }
	@name(".ncrt.egress.tbl.ports")
	table ncl_port_tbl {
		key = { EM.egress_port : exact; }
		actions = {host_port; device_port; drop; }
		default_action = drop();
		size = 256;
	}
	apply {
		if (H.ncp.isValid()) {
			if ((H.ncp.act == _ncl_action_repeat_)) { }
			else {
				ncl_port_tbl.apply();
				if ((((H.ncp.act == _ncl_action_multicast_) || (H.ncp.act == _ncl_action_multicast_long_)) || (H.ip4.src_addr == H.ip4.dst_addr)))
					ncl_use_implicit_ip4_src_addr(H);
			}
		}
	}
}

Pipeline(MainIngressParser(), MainIngress(), MainIngressDeparser(), MainEgressParser(), MainEgress(), MainEgressDeparser()) pipe;
Switch(pipe) main;
